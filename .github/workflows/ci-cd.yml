name: build push and deploy image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${{ secrets.AWS_ACTION_ROLE }}
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  build: 
    runs-on: ubuntu-latest # github runner
    steps: 
      - name: clone repo
        uses: actions/checkout@v3
      - name: Aws creds config
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          role-to-assume:  ${{ env.AWS_ROLE }}  # OIDC (Open id Connect) it's more secure
          aws-region: ${{ env.AWS_REGION }} 
      - name:  Loging to ecr 
        uses:  aws-actions/amazon-ecr-login@v1
        id: ecr-login
      - name: Build tag and push image
        id: build-and-push
        run:  |
            docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }} .
            

      - name: Scan docker Image for vulnerabiities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}"   # Docker image name to scan
          format: 'table'            # Can be table, json, or sarif
          exit-code: '1'             # Fails the pipeline if critical/high vulns are found
          severity: 'CRITICAL,HIGH'  # Only fail on HIGH and CRITICAL issues (can also add MEDIUM, etc.)

      - name: Push image to ecr
        run:
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}
      